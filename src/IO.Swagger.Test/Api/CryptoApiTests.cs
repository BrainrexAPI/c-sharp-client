/* 
 * Brainrex API Explorer
 *
 * Welcome to the Brainrex API explorer, we make analytics tools for crypto and blockchain. Our currently propiertary models offer sentiment analysis, market making, blockchain monitoring and face-id verification. This AI models can be consumed from this API. We also offer integrations to open data and propietary data providers, as well as free test data we collect. There is a collection of data transformation tools. Join our Telegram group to get the latest news and ask questions [https://t.me/brainrex, #brainrex](https://t.me/brainrex). More about Brainrex at [https://brainrex.com](http://brainrex.com). Full Documentation can be found at [https://brainrexapi.github.io/docs](https://brainrexapi.github.io/docs)
 *
 * OpenAPI spec version: 0.1.1
 * Contact: support@brainrex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CryptoApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CryptoApiTests
    {
        private CryptoApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CryptoApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CryptoApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CryptoApi
            //Assert.IsInstanceOfType(typeof(CryptoApi), instance, "instance is a CryptoApi");
        }

        
        /// <summary>
        /// Test ExchangesDownloadCandles
        /// </summary>
        [Test]
        public void ExchangesDownloadCandlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Request2 request = null;
            //var response = instance.ExchangesDownloadCandles(request);
            //Assert.IsInstanceOf<InlineResponse201> (response, "response is InlineResponse201");
        }
        
        /// <summary>
        /// Test ExchangesList
        /// </summary>
        [Test]
        public void ExchangesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExchangesList();
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
        /// <summary>
        /// Test ExchangesMarketmaker
        /// </summary>
        [Test]
        public void ExchangesMarketmakerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Request3 request = null;
            //var response = instance.ExchangesMarketmaker(request);
            //Assert.IsInstanceOf<InlineResponse2011> (response, "response is InlineResponse2011");
        }
        
        /// <summary>
        /// Test ExchangesRead
        /// </summary>
        [Test]
        public void ExchangesReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ExchangesRead();
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
        /// <summary>
        /// Test ExchangesTickerDataDownload
        /// </summary>
        [Test]
        public void ExchangesTickerDataDownloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Request1 request = null;
            //var response = instance.ExchangesTickerDataDownload(request);
            //Assert.IsInstanceOf<InlineResponse201> (response, "response is InlineResponse201");
        }
        
    }

}
